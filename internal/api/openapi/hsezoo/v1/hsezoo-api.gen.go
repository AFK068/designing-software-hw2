// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AnimalGender.
const (
	AnimalGenderFemale AnimalGender = "Female"
	AnimalGenderMale   AnimalGender = "Male"
)

// Defines values for AnimalStatus.
const (
	AnimalStatusHealthy AnimalStatus = "Healthy"
	AnimalStatusSick    AnimalStatus = "Sick"
)

// Defines values for AnimalInputGender.
const (
	AnimalInputGenderFemale AnimalInputGender = "Female"
	AnimalInputGenderMale   AnimalInputGender = "Male"
)

// Defines values for AnimalInputStatus.
const (
	AnimalInputStatusHealthy AnimalInputStatus = "Healthy"
	AnimalInputStatusSick    AnimalInputStatus = "Sick"
)

// Animal defines model for Animal.
type Animal struct {
	BirthDate    time.Time          `json:"birthDate"`
	EnclosureId  openapi_types.UUID `json:"enclosureId"`
	FavoriteFood string             `json:"favoriteFood"`
	Gender       AnimalGender       `json:"gender"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	Species      string             `json:"species"`
	Status       AnimalStatus       `json:"status"`
}

// AnimalGender defines model for Animal.Gender.
type AnimalGender string

// AnimalStatus defines model for Animal.Status.
type AnimalStatus string

// AnimalInput defines model for AnimalInput.
type AnimalInput struct {
	BirthDate    time.Time          `json:"birthDate"`
	EnclosureId  openapi_types.UUID `json:"enclosureId"`
	FavoriteFood string             `json:"favoriteFood"`
	Gender       AnimalInputGender  `json:"gender"`
	Name         string             `json:"name"`
	Species      string             `json:"species"`
	Status       AnimalInputStatus  `json:"status"`
}

// AnimalInputGender defines model for AnimalInput.Gender.
type AnimalInputGender string

// AnimalInputStatus defines model for AnimalInput.Status.
type AnimalInputStatus string

// AnimalListResponse defines model for AnimalListResponse.
type AnimalListResponse struct {
	Animals *[]Animal `json:"animals,omitempty"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code             *string `json:"code,omitempty"`
	Description      *string `json:"description,omitempty"`
	ExceptionMessage *string `json:"exceptionMessage,omitempty"`
}

// Enclosure defines model for Enclosure.
type Enclosure struct {
	Animals        *[]Animal          `json:"animals,omitempty"`
	CurrentAnimals int                `json:"currentAnimals"`
	Id             openapi_types.UUID `json:"id"`
	MaxCapacity    int                `json:"maxCapacity"`
	Size           int                `json:"size"`
	Type           string             `json:"type"`
}

// EnclosureInput defines model for EnclosureInput.
type EnclosureInput struct {
	MaxCapacity int    `json:"maxCapacity"`
	Size        int    `json:"size"`
	Type        string `json:"type"`
}

// EnclosureListResponse defines model for EnclosureListResponse.
type EnclosureListResponse struct {
	Enclosures *[]Enclosure `json:"enclosures,omitempty"`
}

// FeedingSchedule defines model for FeedingSchedule.
type FeedingSchedule struct {
	Animal      Animal             `json:"animal"`
	Completed   bool               `json:"completed"`
	FeedingTime time.Time          `json:"feedingTime"`
	FoodType    string             `json:"foodType"`
	Id          openapi_types.UUID `json:"id"`
}

// FeedingScheduleInput defines model for FeedingScheduleInput.
type FeedingScheduleInput struct {
	AnimalId    openapi_types.UUID `json:"animalId"`
	FeedingTime time.Time          `json:"feedingTime"`
	FoodType    string             `json:"foodType"`
}

// FeedingScheduleListResponse defines model for FeedingScheduleListResponse.
type FeedingScheduleListResponse struct {
	Schedules *[]FeedingSchedule `json:"schedules,omitempty"`
}

// MoveAnimalInput defines model for MoveAnimalInput.
type MoveAnimalInput struct {
	NewEnclosureId openapi_types.UUID `json:"newEnclosureId"`
}

// ZooStatistics defines model for ZooStatistics.
type ZooStatistics struct {
	FeedingSchedulesCount int `json:"feedingSchedulesCount"`
	FreeEnclosures        int `json:"freeEnclosures"`
	TotalAnimals          int `json:"totalAnimals"`
	TotalEnclosures       int `json:"totalEnclosures"`
}

// PostAnimalsJSONRequestBody defines body for PostAnimals for application/json ContentType.
type PostAnimalsJSONRequestBody = AnimalInput

// PostAnimalsAnimalIdMoveJSONRequestBody defines body for PostAnimalsAnimalIdMove for application/json ContentType.
type PostAnimalsAnimalIdMoveJSONRequestBody = MoveAnimalInput

// PostEnclosuresJSONRequestBody defines body for PostEnclosures for application/json ContentType.
type PostEnclosuresJSONRequestBody = EnclosureInput

// PostFeedingSchedulesJSONRequestBody defines body for PostFeedingSchedules for application/json ContentType.
type PostFeedingSchedulesJSONRequestBody = FeedingScheduleInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all animals
	// (GET /animals)
	GetAnimals(ctx echo.Context) error
	// Add a new animal
	// (POST /animals)
	PostAnimals(ctx echo.Context) error
	// Delete an animal
	// (DELETE /animals/{animalId})
	DeleteAnimalsAnimalId(ctx echo.Context, animalId openapi_types.UUID) error
	// Get animal by ID
	// (GET /animals/{animalId})
	GetAnimalsAnimalId(ctx echo.Context, animalId openapi_types.UUID) error
	// Move an animal to a new enclosure
	// (POST /animals/{animalId}/move)
	PostAnimalsAnimalIdMove(ctx echo.Context, animalId openapi_types.UUID) error
	// Get all enclosures
	// (GET /enclosures)
	GetEnclosures(ctx echo.Context) error
	// Add a new enclosure
	// (POST /enclosures)
	PostEnclosures(ctx echo.Context) error
	// Delete an enclosure
	// (DELETE /enclosures/{enclosureId})
	DeleteEnclosuresEnclosureId(ctx echo.Context, enclosureId openapi_types.UUID) error
	// Get enclosure by ID
	// (GET /enclosures/{enclosureId})
	GetEnclosuresEnclosureId(ctx echo.Context, enclosureId openapi_types.UUID) error
	// Get all feeding schedules
	// (GET /feeding-schedules)
	GetFeedingSchedules(ctx echo.Context) error
	// Add a new feeding schedule
	// (POST /feeding-schedules)
	PostFeedingSchedules(ctx echo.Context) error
	// Delete a feeding schedule
	// (DELETE /feeding-schedules/{scheduleId})
	DeleteFeedingSchedulesScheduleId(ctx echo.Context, scheduleId openapi_types.UUID) error
	// Get feeding schedule by ID
	// (GET /feeding-schedules/{scheduleId})
	GetFeedingSchedulesScheduleId(ctx echo.Context, scheduleId openapi_types.UUID) error
	// Get zoo statistics
	// (GET /statistics)
	GetStatistics(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAnimals converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnimals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnimals(ctx)
	return err
}

// PostAnimals converts echo context to params.
func (w *ServerInterfaceWrapper) PostAnimals(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAnimals(ctx)
	return err
}

// DeleteAnimalsAnimalId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAnimalsAnimalId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", ctx.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter animalId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAnimalsAnimalId(ctx, animalId)
	return err
}

// GetAnimalsAnimalId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAnimalsAnimalId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", ctx.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter animalId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAnimalsAnimalId(ctx, animalId)
	return err
}

// PostAnimalsAnimalIdMove converts echo context to params.
func (w *ServerInterfaceWrapper) PostAnimalsAnimalIdMove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", ctx.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter animalId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAnimalsAnimalIdMove(ctx, animalId)
	return err
}

// GetEnclosures converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclosures(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclosures(ctx)
	return err
}

// PostEnclosures converts echo context to params.
func (w *ServerInterfaceWrapper) PostEnclosures(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEnclosures(ctx)
	return err
}

// DeleteEnclosuresEnclosureId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEnclosuresEnclosureId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclosureId" -------------
	var enclosureId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "enclosureId", ctx.Param("enclosureId"), &enclosureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclosureId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEnclosuresEnclosureId(ctx, enclosureId)
	return err
}

// GetEnclosuresEnclosureId converts echo context to params.
func (w *ServerInterfaceWrapper) GetEnclosuresEnclosureId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "enclosureId" -------------
	var enclosureId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "enclosureId", ctx.Param("enclosureId"), &enclosureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enclosureId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEnclosuresEnclosureId(ctx, enclosureId)
	return err
}

// GetFeedingSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeedingSchedules(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFeedingSchedules(ctx)
	return err
}

// PostFeedingSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedingSchedules(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedingSchedules(ctx)
	return err
}

// DeleteFeedingSchedulesScheduleId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFeedingSchedulesScheduleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scheduleId" -------------
	var scheduleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFeedingSchedulesScheduleId(ctx, scheduleId)
	return err
}

// GetFeedingSchedulesScheduleId converts echo context to params.
func (w *ServerInterfaceWrapper) GetFeedingSchedulesScheduleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "scheduleId" -------------
	var scheduleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFeedingSchedulesScheduleId(ctx, scheduleId)
	return err
}

// GetStatistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatistics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatistics(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/animals", wrapper.GetAnimals)
	router.POST(baseURL+"/animals", wrapper.PostAnimals)
	router.DELETE(baseURL+"/animals/:animalId", wrapper.DeleteAnimalsAnimalId)
	router.GET(baseURL+"/animals/:animalId", wrapper.GetAnimalsAnimalId)
	router.POST(baseURL+"/animals/:animalId/move", wrapper.PostAnimalsAnimalIdMove)
	router.GET(baseURL+"/enclosures", wrapper.GetEnclosures)
	router.POST(baseURL+"/enclosures", wrapper.PostEnclosures)
	router.DELETE(baseURL+"/enclosures/:enclosureId", wrapper.DeleteEnclosuresEnclosureId)
	router.GET(baseURL+"/enclosures/:enclosureId", wrapper.GetEnclosuresEnclosureId)
	router.GET(baseURL+"/feeding-schedules", wrapper.GetFeedingSchedules)
	router.POST(baseURL+"/feeding-schedules", wrapper.PostFeedingSchedules)
	router.DELETE(baseURL+"/feeding-schedules/:scheduleId", wrapper.DeleteFeedingSchedulesScheduleId)
	router.GET(baseURL+"/feeding-schedules/:scheduleId", wrapper.GetFeedingSchedulesScheduleId)
	router.GET(baseURL+"/statistics", wrapper.GetStatistics)

}
